{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","KeyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","onChange","this","onKeyDown","type","Todoing","todo","map","item","idx","key","onClick","del","defaultProps","Todolist","additem","data","delItem","splice","console","log","ReactDOM","render","document","getElementById","obj","id","class","children","container","fragment","createDocumentFragment","ele","createElement","className","i","length","txt","createTextNode","appendChild"],"mappings":"yOACuBA,Y,2BCGFC,E,YACjB,aAAc,IAAD,8BACT,+CASJC,YAAY,SAACC,GAEM,KAAZA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAbnB,EAkBbC,aAAa,SAACN,GACV,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAlB5D,EAAKN,YAAY,EAAKA,YAAYW,KAAjB,gBACjB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,sEAwBT,OACI,6BAGI,2BAAON,KAAK,IAAIO,SAAUC,KAAKV,aAAcD,MAAOW,KAAKL,MAAMC,EAAGK,UAAWD,KAAKjB,YAAamB,KAAK,SAHxG,IAKI,2BAAOV,KAAK,IAAIO,SAAUC,KAAKV,aAAcD,MAAOW,KAAKL,MAAME,EAAGI,UAAWD,KAAKjB,YAAamB,KAAK,SALxG,IAOI,2BAAOV,KAAK,IAAIO,SAAUC,KAAKV,aAAcD,MAAOW,KAAKL,MAAMG,EAAGG,UAAWD,KAAKjB,YAAamB,KAAK,SAPxG,IASI,2BAAIF,KAAKL,MAAMC,EAAEI,KAAKL,MAAME,EAAEG,KAAKL,MAAMG,GACzC,qD,GApCuBjB,aCAlBsB,E,iLACP,IAAD,OAEDC,EAAMJ,KAAKd,MAAXkB,KACJ,OAEI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACT,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQG,QAAS,kBAAI,EAAKvB,MAAMwB,IAAIH,KAApC,yB,GAVI1B,aAuBrCsB,EAAQQ,aAAa,CACjBP,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICxBGQ,E,YAEjB,aAAc,IAAD,8BACT,+CAqBJC,QAAQ,SAACC,GAGL,EAAKvB,SAAS,CACVa,KAAK,GAAD,mBAAK,EAAKT,MAAMS,MAAhB,CAAqBU,OA1BpB,EA6BbC,QAAQ,SAACR,GAEL,IAAIH,EAAK,YAAI,EAAKT,MAAMS,MACxBA,EAAKY,OAAOT,EAAI,GAEhB,EAAKhB,UAAS,SAACI,EAAMT,GAEjB,OADA+B,QAAQC,IAAIvB,EAAMS,MACX,CACHA,KAAMA,OAnCd,EAAKT,MAAM,CACPS,KAAK,CAAC,EAAE,EAAE,GACVR,EAAE,IACFC,EAAE,KALG,E,sEAmDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKa,KAAKa,UACrB,kBAAC,EAAD,CAAST,KAAMJ,KAAKL,MAAMS,KAAMM,IAAKV,KAAKe,e,GAxDpBlC,aCuDtCsC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SA8B5B,IACIC,EAAI,CACJrB,KAAK,KACLhB,MAAM,CACFsC,GAAG,MACHC,MAAM,MACNC,SAAS,CAAC,QAAQ,QAAQH,EAAI,CAC1BrB,KAAK,KACLhB,MAAM,CACFsC,GAAG,MACHC,MAAM,MACNC,SAAS,CAAC,QAAQ,eAKlC,SAASN,EAAOG,EAAII,GAAW,IACvBzB,EAAYqB,EAAZrB,KAAKhB,EAAOqC,EAAPrC,MAEL0C,EAASP,SAASQ,yBAClBC,EAAIT,SAASU,cAAc7B,GAC/B,IAAI,IAAII,KAAQpB,EACZ,GAAU,UAAPoB,EACCwB,EAAIE,UAAU9C,EAAMoB,QAClB,GAAU,aAAPA,EACL,IAAI,IAAI2B,EAAE,EAAEA,EAAE/C,EAAMwC,SAASQ,OAAOD,IAEhC,GAA8B,kBAApB/C,EAAMwC,SAASO,GACrBb,EAAOlC,EAAMwC,SAASO,GAAGH,OACxB,CACD,IAAIK,EAAId,SAASe,eAAelD,EAAMwC,SAASO,IAC/CH,EAAIO,YAAYF,QAIxBL,EAAIxB,GAAMpB,EAAMoB,GAGxBsB,EAASS,YAAYP,GACrBH,EAAUU,YAAYT,GAE1BR,CAAOG,EAAIF,SAASC,eAAe,SAsB3BD,SAASC,eAAe,QAmB5BU,UAAU,W","file":"static/js/main.00ce85fe.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a: 100,\r\n            b: 200\r\n        }\r\n        console.log('constructor')\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState)\r\n        console.log(this.state.time)\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name: this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\n// export default ShowTime;\r\n\r\n//命名导出：可以导出多个，被引入时与导出的名字一致","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n// \r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n\r\n    handleInput=(e)=>{\r\n        //绑定this,事件处理函数写成箭头函数，或者用bind\r\n        if(e.KeyCode===13){\r\n            this.props.add(e.target.value);\r\n\r\n        }\r\n\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <input type=\"text\"/> */}\r\n                {/* <input onKeyDown={this.handleInput} type=\"text\"/> */}\r\n                <input name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                <button>提交</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Todoingput from './Todoinput';\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        //解构赋值\r\n        var{todo}=this.props;\r\n        return (\r\n            //从父组件往子组件传                                    \r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                    <li key={idx}>\r\n                        {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\r\n                    </li>)\r\n                }\r\n            </ul>           \r\n        )\r\n    }\r\n}\r\n//这里需要引入protoType的包\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array,\r\n    del: PropTypes.func\r\n}\r\n//设置默认值\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    //状态在构造器中去声明\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n    }\r\n    additem=(data)=>{\r\n        // this.state.todo.push(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem=(idx)=>{\r\n        //1、state状态不能直接改变或者处理，通过setState改变\r\n        let todo=[...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.additem} />\r\n                <Todoing todo={this.state.todo} del={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './ShowTime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n// class ShowTime extends React.Component{\n//     constructor(){\n//         super();\n//         this.state={\n//             time:new Date().toLocaleString(),\n//             a:100,\n//             b:200\n//         }\n//         setInterval(()=>{\n//             this.setState({\n//                 time:new Date().toLocaleString()\n//             })\n//         });\n//     }\n//     render(){\n//         var {name,age}=this.props;\n//         return(\n//             <Fragment>\n//                 {/**条件渲染 */}\n//                 {name.length>5?<div>姓名：{name}</div>:''}\n//                 <div>状态：{this.state.time}</div>\n                \n//                 {/**循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{\n//                             if(index%2 === 0){\n//                                 return <p key={index}>{item}</p>\n//                             }\n//                         })\n//                     }\n\n//                 </div>\n//             </Fragment>\n//         )\n//     }\n        \n// }\n\n//组件交互\n//父组件--》子组件，调用子组件时添加属性，子组件通过props拿到传递的值\n//子组件--》父组件，\nReactDOM.render(\n    <Todolist/>,//可以看见他的效果，被他引的js文件也可以看见-----此位置写根组件或者根路由\n    document.getElementById(\"root\")\n)\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n// //显示当前系统的时间\n// function showTime(){\n//     var ele=<div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector(\"#root\")\n//     );\n\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n//react技术栈\n//jsx的语法\nvar str='react';\nvar obj={\n    type:'h1',\n    props:{\n        id:'tit',\n        class:'tit',\n        children:['hello','react',obj={\n            type:'h1',\n            props:{\n                id:'tit',\n                class:'tit',\n                children:['hello','react']\n            }\n        }]\n    }\n}\nfunction render(obj,container){\n    var{type,props}=obj;\n    //文档碎片:一个虚拟结点，所有操作处理结束后再统一进行添加\n    var fragment=document.createDocumentFragment();\n    var ele=document.createElement(type);\n    for(var item in props){\n        if(item==='class'){\n            ele.className=props[item]\n        }else if(item==='children'){//递归\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML+=props.children[i];\n                if(typeof props.children[i]==='object'){\n                    render(props.children[i],ele)\n                }else{\n                    var txt=document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item]=props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\nrender(obj,document.getElementById('root'));\n// var ele=<h1 class=\"tit\">hello{str}</h1>;//是一个对象........和下面这个是等价的\n\n// var ele=React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'h6',\n//         {id:'tit',class:'title'},\n//         'react')\n//     );\n// ReactDOM.render(ele, document.getElementById('root'));\n\n//页面渲染过程\n//请求Html页面-》浏览器HTML解析器解析html文件-》生成DOM树\n//link引入css文件，css解析器解析css，生成css对象模型（CSSOM）和DOM树结合生成一个render tree渲染树\n\n//页面回流（重排reflow）：DOM结构发生变化，内容变化，大小位置变化，都会引起页面回流，代价大\n//页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色），引起重绘，代价比较小\n// 1、先用变量进行dom处理，最后一次渲染\n//console.time('time');\nvar div=document.getElementById(\"root\");\n// var str=''\n// for(var i=0;i<100;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n//2、对于样式的处理,声明一个css类\n// var div=document.getElementById('root');\n//不建议如下处理\n// div.style.width='100px';\n// div.style.height='100px';\n// div.style.background='red';\n//建议这样处理：\n// .active{\n//     width:100px;\n//     height:100px;\n//     background:red;\n// }\ndiv.className=\"active\";\n\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）\n\n\n\n"],"sourceRoot":""}